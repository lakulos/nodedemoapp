name: build_IMG

on: push

permissions:
  id-token: write
  contents: read

jobs:
    build-to-acr:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
                  
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASS }}
            login-server: ${{ secrets.ACR_USERNAME }}.azurecr.io
        
      - name: Calculate Dockerfile hash
        id: calculate-hash
        run: |
          DOCKER_HASH=$(shasum -a 256 Dockerfile | cut -d ' ' -f 1)
          echo "Dockerfile hash: $DOCKER_HASH"
          echo "::set-output name=DOCKER_HASH::$DOCKER_HASH"

      - name: Check if image exists in ACR
        id: check-image
        run: |
          IMAGE_EXISTS=$(az acr repository show-tags --name ${{ secrets.ACR_USERNAME }} --repository demonodejsapp --query "[?contains(@, '${{ env.DOCKER_HASH }}')]" -o tsv)
          if [ -z "$IMAGE_EXISTS" ]; then
            echo "Image does not exist. Proceeding with build and push."
            echo "::set-output name=IMAGE_EXISTS::false"
          else
            echo "Image already exists with the same hash. Skipping build and push."
            echo "::set-output name=IMAGE_EXISTS::true"
        shell: bash



      - name: build_image
        if: steps.check-image.outputs.IMAGE_EXISTS == 'false'
        run: |
                docker build -t demonodeapp .
                docker tag demonodeapp ${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp:${{ github.sha }}
                docker push ${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp:${{ github.sha }}


    deploy-to-AKS:
      runs-on: ubuntu-latest
      needs: 
            build-to-acr
      steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Set up AKS credentials
        run: |
                az aks get-credentials --resource-group ${{ secrets.RG }} --name ${{ secrets.AKS }}

      - name: Deploy to AKS
        run: |
                sed -i 's|image: .*|image: '"${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp:${{ github.sha }}"'|' mavendeploy.yml
                kubectl apply -f mavendeploy.yml
                kubectl apply -f ingress.yml
