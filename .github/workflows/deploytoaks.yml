name: build_and_deploy

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

jobs:
  build-to-acr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      run: |
        docker buildx create --use
        docker buildx inspect --bootstrap

    - name: Build image with buildx
      run: |
        IMAGE_NAME=${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp
        IMAGE_TAG=${{ github.sha }}

        # Build the image but do not push yet
        docker buildx build --platform linux/amd64 -t $IMAGE_NAME:$IMAGE_TAG --load .

    - name: Get image digest
      run: |
        IMAGE_NAME=${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp
        IMAGE_TAG=${{ github.sha }}

        # Extract the image digest after the build
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME:$IMAGE_TAG | cut -d'@' -f2)

        echo "Image Digest: $IMAGE_DIGEST"
        echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV

    - name: Check if image exists in ACR
      id: check-acr
      run: |
        EXISTING_DIGEST=$(az acr repository show-manifests --name ${{ secrets.ACR_USERNAME }} --repository demonodejsapp --query "[?digest=='${{ env.IMAGE_DIGEST }}'].digest" -o tsv)
        echo "EXISTING_DIGEST=$EXISTING_DIGEST" >> $GITHUB_ENV

    - name: Push image to ACR if changed
      if: ${{ env.EXISTING_DIGEST == '' }}
      run: |
        IMAGE_NAME=${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp
        IMAGE_TAG=${{ github.sha }}
        
        # Push the image only if the digest is new
        docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-to-AKS:
    runs-on: ubuntu-latest
    needs: build-to-acr
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.RG }} --name ${{ secrets.AKS }}

    - name: Deploy to AKS
      run: |
        sed -i 's|image: .*|image: '"${{ secrets.ACR_USERNAME }}.azurecr.io/demonodejsapp:${{ github.sha }}"'|' mavendeploy.yml
        kubectl apply -f mavendeploy.yml
        kubectl apply -f ingress.yml
